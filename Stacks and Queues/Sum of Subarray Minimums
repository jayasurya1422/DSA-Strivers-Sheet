Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444


class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] nse=findNse(arr);
        int[] psee=findPsee(arr);
        int n=arr.length;
        long sum=0;
        int mod=(int)1e9+7;
        for(int i=0;i<n;i++){
            long left=i-psee[i];
            long right=nse[i]-i;
            sum = (sum+((long)(((left)*(right))%mod)*arr[i])%mod)%mod;
        }
        return (int)sum;
    }
    public int[] findNse(int[] arr){
        int n=arr.length;
        int[] nse=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            nse[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int[] findPsee(int[] arr){
        int n=arr.length;
        int[] psee=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()]>arr[i]){
                st.pop();
            }
            psee[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return psee;
    }
}
