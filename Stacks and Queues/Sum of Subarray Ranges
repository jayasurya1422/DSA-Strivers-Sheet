You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.



class Solution {
    public long subArrayRanges(int[] arr) {
        return sumSubarrayMaxs(arr) - sumSubarrayMins(arr);
    }
    public long sumSubarrayMins(int[] arr) {
        int[] nse=findNse(arr);
        int[] psee=findPsee(arr);
        int n=arr.length;
        long sum=0;
        int mod=(int)1e9+7;
        for(int i=0;i<n;i++){
            long left=i-psee[i];
            long right=nse[i]-i;
            sum += left*right*arr[i];
        }
        return sum;
    }
    public int[] findNse(int[] arr){
        int n=arr.length;
        int[] nse=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            nse[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int[] findPsee(int[] arr){
        int n=arr.length;
        int[] psee=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()]>arr[i]){
                st.pop();
            }
            psee[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return psee;
    }
    public long sumSubarrayMaxs(int[] arr) {
        int[] nge=findNge(arr);
        int[] pgee=findPgee(arr);
        int n=arr.length;
        long sum=0;
        int mod=(int)1e9+7;
        for(int i=0;i<n;i++){
            long left=i-pgee[i];
            long right=nge[i]-i;
            sum += left*right*arr[i];
        }
        return sum;
    }
    public int[] findNge(int[] arr){
        int n=arr.length;
        int[] nge=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()]<=arr[i]){
                st.pop();
            }
            nge[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nge;
    }
    public int[] findPgee(int[] arr){
        int n=arr.length;
        int[] pgee=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()]<arr[i]){
                st.pop();
            }
            pgee[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return pgee;
    }
}
