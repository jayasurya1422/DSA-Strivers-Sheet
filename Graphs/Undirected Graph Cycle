Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether the graph contains any cycle or not. The Graph is represented as an adjacency list, where adj[i] contains all the vertices that are directly connected to vertex i.

NOTE: The adjacency list represents undirected edges, meaning that if there is an edge between vertex i and vertex j, both j will be adj[i] and i will be in adj[j].

Examples:

Input: adj = [[1], [0,2,4], [1,3], [2,4], [1,3]] 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Input: adj = [[], [2], [1,3], [2]]
Output: 0
Explanation: 

No cycle in the graph.
Constraints:
1 ≤ adj.size() ≤ 105



class Solution {
    // Function to detect cycle in an undirected graph.
    class Pair{
        int first;
        int second;
        public Pair(int first, int second) {
            this.first = first;
            this.second = second; 
    }
    }
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[]=new boolean[adj.size()];
        for(int i=0;i<vis.length;i++){
            if(!vis[i]){
                if(checkForCycle(i,adj,vis)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean checkForCycle(int start,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        Queue<Pair> q=new LinkedList<>();
        vis[start]=true;
        q.add(new Pair(start,-1));
        while(!q.isEmpty()){
            int node=q.peek().first;
            int parent=q.peek().second;
            q.remove();
            for(int it:adj.get(node)){
                if(!vis[it]){
                    vis[it]=true;
                    q.add(new Pair(it,node));
                }
                else if(parent!=it){
                    return true;
                }
            }
        }
        return false;
    }
}
