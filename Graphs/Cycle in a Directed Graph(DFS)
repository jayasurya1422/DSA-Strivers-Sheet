Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.
The graph is represented as an adjacency list, where adj[i] contains a list of vertices that are directly reachable from vertex i. Specifically, adj[i][j] represents an edge from vertex i to vertex j.

Example 1:

Input:

Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:
Input:


Output: 0
Explanation: no cycle in the graph
Constraints:
1 ≤ V, E ≤ 105



class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj) {
        // code here
        int n=adj.size();
        int[] vis=new int[n];
        int[] pathvis=new int[n];
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                if(dfsCheck(i,adj,vis,pathvis)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfsCheck(int node,ArrayList<ArrayList<Integer>> adj,int[] vis,int[] pathvis){
        vis[node]=1;
        pathvis[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(dfsCheck(it,adj,vis,pathvis)){
                    return true;
                }
            }
            else if(pathvis[it]==1){
                return true;
            }
        }
        pathvis[node]=0;
        return false;
    }
}
